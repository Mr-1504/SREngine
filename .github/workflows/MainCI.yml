name: SpaRcle Engine Main CI

on:
  push:
    paths-ignore:
      - 'Documentation/**'
      - '**.md'
    branches:
      - master
      - dev
      - features/*

  pull_request:
    paths-ignore:
      - 'Documentation/**'
      - '**.md'
    branches:
      - master
      - dev
      - features/*

jobs:
  manage:
    name: Handle arguments and choose platform.
    runs-on: windows-latest
    if: "!contains(github.event.head_commit.message, '#SR_CI_NONE')"
    outputs:
      buildRelease: ${{ steps.sBuildRelease.outputs.buildRelease }}
      buildDebug: ${{ steps.sBuildDebug.outputs.buildDebug }}
      artifactPush: ${{ steps.sArtifact.outputs.artifactPush }}
      buildWindows: ${{ steps.sBuildWindows.outputs.buildWindows }}
      buildLinux: ${{ steps.sBuildLinux.outputs.buildLinux }}
    steps:
      - name: Fetching repository.
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - if: "contains(github.event.head_commit.message, '#SR_CI_RELEASE')"
        name: Handling "#SR_CI_RELEASE" argument.
        shell: bash
        run: |
          echo "buildRelease=true" >> "$GITHUB_ENV"

      - if: "contains(github.event.head_commit.message, '#SR_CI_DEBUG')"
        name: Handling "#SR_CI_DEBUG" argument.
        shell: bash
        run: |
          echo "buildDebug=true" >> "$GITHUB_ENV"

      - if: "contains(github.event.head_commit.message, '#SR_CI_ALL')"
        name: Handling "#SR_CI_ALL" argument.
        shell: bash
        run: |
          echo "buildRelease=true" >> "$GITHUB_ENV"
          echo "buildDebug=true" >> "$GITHUB_ENV"

      - if: "contains(github.event.head_commit.message, '#SR_CI_ARTIFACT')"
        name: Handling "#SR_CI_ARTIFACT" argument.
        id: sArtifact
        shell: bash
        run: |
          echo "artifactPush=true" >> "$GITHUB_OUTPUT"

      - if: "contains(github.event.head_commit.message, '#SR_CI_LINUX')"
        name: Handling "#SR_CI_LINUX" argument.
        shell: bash
        run: |
          echo "buildLinux=true" >> "$GITHUB_ENV"

      - if: "contains(github.event.head_commit.message, '#SR_CI_WINDOWS')"
        name: Handling "#SR_CI_WINDOWS" argument.
        shell: bash
        run: |
          echo "buildWindows=true" >> "$GITHUB_ENV"

      - if: env.buildRelease != 'true' && env.buildDebug != 'true'
        name: Setting default build type.
        shell: bash
        run: |
          echo "buildDebug=true" >> "$GITHUB_ENV"

      - if: env.buildWindows != 'true' && env.buildLinux != 'true'
        name: Setting default platform type.
        shell: bash
        run: |
          echo "buildWindows=true" >> "$GITHUB_ENV"
          echo "buildLinux=true" >> "$GITHUB_ENV"

      - if: env.buildLinux == 'true'
        name: Set global buildWindows.
        id: sBuildWindows
        run: |
          echo "buildWindows=true" >> "$GITHUB_OUTPUT"

      - if: env.buildWindows == 'true'
        name: Set global buildLinux.
        id: sBuildLinux
        run: |
          echo "buildWindows=true" >> "$GITHUB_OUTPUT"

      - if: env.buildDebug == 'true'
        name: Set global buildDebug.
        id: sBuildDebug
        run: |
          echo "buildDebug=true" >> "$GITHUB_OUTPUT"

      - if: env.buildRelease == 'true'
        name: Set global buildRelease.
        id: sBuildRelease
        run: |
          echo "buildDebug=true" >> "$GITHUB_OUTPUT"
  

  BuildWindows:
    name: Windows.
    needs: manage
    if: needs.manage.outputs.buildWindows == 'true'
    uses: ./.github/workflows/WindowsCI.yml
    with:
      buildRelease: needs.manage.outputs.buildRelease
      buildDebug: needs.manage.outputs.buildDebug
      artifactPush: needs.manage.outputs.artifactPush

  BuildLinux:
    name: Linux.
    needs: manage
    if: needs.manage.outputs.buildLinux == 'true'
    uses: ./.github/workflows/LinuxCI.yml
    with:
      buildRelease: needs.manage.outputs.buildRelease
      buildDebug: needs.manage.outputs.buildDebug
      artifactPush: needs.manage.outputs.artifactPush
