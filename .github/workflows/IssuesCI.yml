on:
  workflow_call:
    inputs:
      windowsBuildState:
        required: true
        type: string
      linuxBuildState:
        required: true
        type: string
      commitActor:
        required: true
        type: string
      commitSha:
        required: true
        type: string
      commitBranch:
        required: true
        type: string
      commitMessage:
        required: true
        type: string
    secrets:
      CITOKEN:
        required: true

jobs:
  Manager:
    name: Manager.
    runs-on: ubuntu-latest
    steps:
      - run: |
          pip install PyGithub
        name: Installing dependencies.

      - name: Closing the issues.
        shell: python
        id: script
        run: |
          import os 
          import re
          from github import Github
          from github import Auth
          commitMessage = os.getenv('commitMessage')          
          commitSha = os.getenv('commitSha')          
          token = os.getenv('ciToken')
          print("Trying to login to GitHub and get the repository")
          auth = Auth.Token(token)
          g = Github(auth=auth)
          repo = g.get_repo("SpaRcle-Studio/SREngine")
          print(f"Commit message:\n{commitMessage}\n")
          regexClose = re.search('#SR_CLOSE((.*))', commitMessage)
          closeMacros = regexClose.group(1)
          closeMacros = closeMacros[1:][:-1]
          closeMacros = closeMacros.replace(' ', '')
          issueIds = closeMacros.split(",")
          print(f"Issue Ids are: {issueIds}")
          for issueId in issueIds:
            print(f"Trying to get issue: {issueId}")
            issue = repo.get_issue(issueId)
            print(f"Creating comment and closing issue: {issueId}")
            issue.create_comment(f"Issue is closed automatically by CI. Commit: {commitSha}")
            issue.edit(state='closed')
            print(f"Success for issue: {issueId}")
          print(f"Script execution is finished.")
        env:
          commitMessage: ${{ inputs.commitMessage }}
          ciToken: ${{ secrets.CITOKEN }}
          commitSha: ${{ inputs.commitSha }}

      - if: inputs.linuxBuildState == 'failure' || inputs.windowsBuildState == 'failure'
        name: Creating an issue.
        uses: dacbd/create-issue-action@main
        with:
          token: ${{ secrets.CITOKEN }}
          title: (Build) Fail on ${{inputs.commitBranch}} branch.
          body: |
            This issue is created automatically by CI.
            Linux Build State: ${{inputs.linuxBuildState}}
            Windows Build State: ${{inputs.windowsBuildState}}
            Commit: ${{inputs.commitSha}}
            Commit Branch: ${{inputs.commitBranch}}
            Commit Author: ${{inputs.commitActor}}
          assignees: ${{inputs.commitActor}}
          labels: build-failed