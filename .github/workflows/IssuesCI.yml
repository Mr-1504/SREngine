on:
  workflow_call:
    inputs:
      windowsBuildState:
        required: true
        type: string
      linuxBuildState:
        required: true
        type: string
      commitActor:
        required: true
        type: string
      commitSha:
        required: true
        type: string
      commitBranch:
        required: true
        type: string
      commitMessage:
        required: true
        type: string
    secrets:
      CITOKEN:
        required: true

jobs:
  Manager:
    name: Manager.
    runs-on: ubuntu-latest
    steps:
      - run: |
          pip install PyGithub
        name: Installing dependencies.

      - name: Closing the issues.
        shell: python
        id: script
        run: |
          import os 
          from github import Github
          from github import Auth
          commitMessage = os.getenv('commitMessage')          
          token = os.getenv('ciToken')
          auth = Auth.Token(token)
          g = Github(auth=auth)
          repo = g.get_repo("SpaRcle-Studio/SREngine")
          print(f"Commit message:\n{commitMessage}\n")
          words = commitMessage.split()
          issueIds = []
          for word in words:
            if word[:10] == "#SR_CLOSE(" and word[10:][:-1].isnumeric():
              print(f"Issue IDs: {word[10:][:-1]}")
              issueIds.append(word[10:][:-1])
          for issueId in issueIds:
            issue = repo.get_issue(issueId)
            issue.create_comment("Issue is closed automatically by CI")
            issue.edit(state='closed')
        env:
          commitMessage: ${{ inputs.commitMessage }}
          ciToken: ${{ secrets.CITOKEN }}

        #secrets:
        #  CITOKEN: %{{ secrets.CITOKEN }}
      #outputEnv = os.getenv('GITHUB_ENV')
      #cmd = f"echo \"issueId={int(word[10:][:-1])}\" >> \"{outputEnv}\" "

      #- name: Closing the issues.
      #  run:
      #    input="issueIdList.txt"
      #    while IFS= read -r line
      #    do
      #      gh issue close --comment "Issue is closed automatically by CI." "$line"
      #    done < "$input"
      #  shell: bash
      #  working-directory: ${{github.workspace}}/CI
      #  env:
      #    GH_TOKEN: ${{ secrets.CITOKEN }}

      #- if: inputs.linuxBuildState != 'failure' && inputs.windowsBuildState != 'failure'
      #  name: Closing the issue.
      #  uses: peter-evans/close-issue@v3
      #  with:
      #    issue-number: ${env.issueId}
      #    comment: Closed automatically by CI.

      - if: inputs.linuxBuildState == 'failure' || inputs.windowsBuildState == 'failure'
        name: Creating an issue.
        uses: dacbd/create-issue-action@main
        with:
          token: ${{ secrets.CITOKEN }}
          title: (Build) Fail on ${{inputs.commitBranch}} branch.
          body: |
            This issue is created automatically by CI.
            Linux Build State: ${{inputs.linuxBuildState}}
            Windows Build State: ${{inputs.windowsBuildState}}
            Commit: ${{inputs.commitSha}}
            Commit Branch: ${{inputs.commitBranch}}
            Commit Author: ${{inputs.commitActor}}
          assignees: ${{inputs.commitActor}}
          labels: build-failed