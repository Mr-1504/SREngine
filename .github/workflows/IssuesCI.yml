on:
  workflow_call:
    inputs:
      windowsBuildState:
        required: true
        type: string
      linuxBuildState:
        required: true
        type: string
      commitActor:
        required: true
        type: string
      commitSha:
        required: true
        type: string
      commitBranch:
        required: true
        type: string
      commitMessage:
        required: true
        type: string
    secrets:
      CITOKEN:
        required: true

jobs:
  Manager:
    name: Manager.
    runs-on: ubuntu-latest
    steps:
      - run: |
          pip install PyGithub
        name: Installing dependencies.

      - if: inputs.linuxBuildState == 'failure' || inputs.windowsBuildState == 'failure'
        name: Creating an issue.
        uses: dacbd/create-issue-action@main
        with:
          token: ${{ secrets.CITOKEN }}
          title: (Build) Fail on ${{inputs.commitBranch}} branch.
          body: |
            This issue is created automatically by CI.
            Linux Build State: ${{inputs.linuxBuildState}}
            Windows Build State: ${{inputs.windowsBuildState}}
            Commit: ${{inputs.commitSha}}
            Commit Branch: ${{inputs.commitBranch}}
            Commit Author: ${{inputs.commitActor}}
          assignees: ${{inputs.commitActor}}
          labels: build-failed

      - name: Fetching repository.
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Closing the issues.
        if: inputs.linuxBuildState != 'failure' && inputs.windowsBuildState != 'failure'
        uses: bdougie/close-issues-based-on-label@v1.2
        env:
          LABEL: build-failed
          GITHUB_TOKEN: ${{ secrets.CITOKEN }}

      #- name: Closing the issues.
      #  if: inputs.linuxBuildState != 'failure' && inputs.windowsBuildState != 'failure'
      #  id: script
      #  shell: bash
      #  working-directory: ${{github.workspace}}/CI/scripts
      # run: | 
      #    python ./Issues.py
      #  env:
      #    commitMessage: ${{ inputs.commitMessage }}
      #    ciToken: ${{ secrets.CITOKEN }}
      #    commitSha: ${{ inputs.commitSha }}
