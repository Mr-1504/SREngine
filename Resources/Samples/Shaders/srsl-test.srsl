ShaderType PostProcessing;

PolygonMode Fill;
CullMode Back;
DepthCompare LessOrEqual;
PrimitiveTopology TriangleStrip;
BlendEnabled true;
DepthWrite false;
DepthTest true;

[[shared]] vec2 UV;
float t;

float aa(float x) {
    t = 1.2;
    return x + t;
}

float bb(float x) {
    return aa(x);
}

float mp(float x) {
    return bb(x);
}

void fragment() {
    COLOR = vec4(UV.x, UV.y, 0.0, mp(-0.2));
}

void vertex() {
    vec3 vertices[4] = {
        vec3(-1.0,  1.0, 0.0),
        vec3(-1.0, -1.0, 0.0),
        vec3( 1.0,  1.0, 0.0),
        vec3( 1.0, -1.0, 0.0),
    };

    vec2 uv[4] = {
        vec2(0.0, 1.0),
        vec2(0.0, 0.0),
        vec2(1.0, 1.0),
        vec2(1.0, 0.0),
    };

    UV = uv[VERTEX_INDEX];
    vec3 p = vertices[VERTEX_INDEX];

    OUT_POSITION = vec4(p, 1.0);
}