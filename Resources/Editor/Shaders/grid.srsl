ShaderType PostProcessing;

PolygonMode Fill;
CullMode Back;
DepthCompare LessOrEqual;
PrimitiveTopology TriangleStrip;
BlendEnabled true;
DepthWrite false;
DepthTest true;

[[shared]] vec3 nearPoint;
[[shared]] vec3 farPoint;
[[shared]] vec3 fragProjView;
[[uniform], [public]] sampler2D diffuse;

vec4 grid(vec3 fragPos3D, float scale) {
    vec2 coord = fragPos3D.xz * scale;
    vec2 derivative = fwidth(coord);
    vec2 grid = abs(fract(coord - 0.5) - 0.5) / derivative;
    float line = min(grid.x, grid.y);
    float minimumz = min(derivative.y, 1);
    float minimumx = min(derivative.x, 1);
    vec4 color = vec4(0.2, 0.2, 0.2, 1.0 - min(line, 1.0));
    // z axis
    if(fragPos3D.x > -0.1 * minimumx && fragPos3D.x < 0.1 * minimumx) {
        color.z = 1.0;
    }
    // x axis
    if(fragPos3D.z > -0.1 * minimumz && fragPos3D.z < 0.1 * minimumz) {
        color.x = 1.0;
    }
    return color;
}


vec3 UnprojectPoint(float x, float y, float z, mat4 view, mat4 projection) {
    mat4 viewInv = inverse(view);
    mat4 projInv = inverse(projection);
    vec4 unprojectedPoint =  viewInv * projInv * vec4(x, y, z, 1.0);
    return unprojectedPoint.xyz / unprojectedPoint.w;
}

float computeDepth(vec3 pos) {
    vec4 clip_space_pos = PROJECTION_MATRIX * VIEW_MATRIX * vec4(pos.xyz, 1.0);
    return (clip_space_pos.z / clip_space_pos.w);
}

float computeLinearDepth(vec3 pos) {
    float far = 2000.0;
    float near = 0.075;
    vec4 clip_space_pos = PROJECTION_MATRIX * VIEW_MATRIX * vec4(pos.xyz, 1.0);
    float clip_space_depth = (clip_space_pos.z / clip_space_pos.w) * 2.0 - 1.0; // put back between -1 and 1
    float linearDepth = (2.0 * near * far) / (far + near - clip_space_depth * (far - near)); // get linear value between 0.01 and 100
    return linearDepth / far; // normalize
}

void fragment() {
    float t = -nearPoint.y / (farPoint.y - nearPoint.y);
    vec3 fragPos3D = nearPoint + t * (farPoint - nearPoint);

    gl_FragDepth = computeDepth(fragPos3D);

    float linearDepth = computeLinearDepth(fragPos3D);
    float fading = max(0, (0.5 - linearDepth));

    COLOR = (grid(fragPos3D, 5) + grid(fragPos3D, 0.5)) * float(t > 0);
    COLOR.a *= fading;
}

void vertex() {
    vec3 vertices[4] = {
        /// vec3(-1.0, 0.0, -1.0),
        /// vec3(-1.0, 0.0,  1.0),
        /// vec3( 1.0, 0.0, -1.0),
        /// vec3( 1.0, 0.0,  1.0),

        vec3(-1.0,  1.0, 0.0),
        vec3(-1.0, -1.0, 0.0),
        vec3( 1.0,  1.0, 0.0),
        vec3( 1.0, -1.0, 0.0),
    };

    vec2 uv[4] = {
        vec2(0.0, 1.0),
        vec2(0.0, 0.0),
        vec2(1.0, 1.0),
        vec2(1.0, 0.0),
    };

    vec3 p = vertices[VERTEX_INDEX];

    nearPoint = UnprojectPoint(p.x, p.y, 0.0, VIEW_MATRIX, PROJECTION_MATRIX);
    farPoint = UnprojectPoint(p.x, p.y, 1.0, VIEW_MATRIX, PROJECTION_MATRIX);

    OUT_POSITION = vec4(p, 1.0);
}