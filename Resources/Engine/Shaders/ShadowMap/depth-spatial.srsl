ShaderType Spatial;

PolygonMode Fill;
CullMode Back;
DepthCompare LessOrEqual;
PrimitiveTopology TriangleList;
BlendEnabled false;
DepthWrite true;
DepthTest true;

[[shared]] vec3 normal;
[[shared]] vec3 fragPos;
[[shared]] vec4 fragPosLightSpace;

void fragment() {

    /*vec3 color = texture(diffuseTexture, fs_in.TexCoords).rgb;
    vec3 normal = normalize(fs_in.Normal);
    vec3 lightColor = vec3(1.0);
    // ambient
    vec3 ambient = 0.15 * color;
    // diffuse
    vec3 lightDir = normalize(lightPos - fs_in.FragPos);
    float diff = max(dot(lightDir, normal), 0.0);
    vec3 diffuse = diff * lightColor;
    // specular
    vec3 viewDir = normalize(viewPos - fs_in.FragPos);
    float spec = 0.0;
    vec3 halfwayDir = normalize(lightDir + viewDir);
    spec = pow(max(dot(normal, halfwayDir), 0.0), 64.0);
    vec3 specular = spec * lightColor;
    // calculate shadow
    float shadow = ShadowCalculation(fs_in.FragPosLightSpace);
    vec3 lighting = (ambient + (1.0 - shadow) * (diffuse + specular)) * color;*/

    FragColor = vec4(lighting, 1.0);
	COLOR = vec4(FRAG_COORD.z, 0.0, 0.0, 1.0);
}

void vertex() {
    fragPos = vec3(MODEL_MATRIX * vec4(VERTEX, 1.0));
    normal  = transpose(inverse(mat3(MODEL_MATRIX))) * NORMAL;
    fragPosLightSpace = LIGHT_SPACE_MATRIX * vec4(fragPos, 1.0);

    OUT_POSITION = PROJECTION_MATRIX * VIEW_MATRIX * MODEL_MATRIX * vec4(VERTEX, 1.0);
}