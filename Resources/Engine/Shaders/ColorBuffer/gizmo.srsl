ShaderType Spatial;

PolygonMode Fill;
CullMode Back;
DepthCompare LessOrEqual;
PrimitiveTopology TriangleList;
BlendEnabled true;
DepthWrite true;
DepthTest false;

[[uniform], [public]] vec3 color;

void fragment() {
	COLOR = vec4(color, 1.0);
}

void vertex() {
    OUT_POSITION = PROJECTION_MATRIX * VIEW_MATRIX * MODEL_MATRIX * vec4(VERTEX, 1.0);
}