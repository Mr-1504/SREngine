ShaderType Spatial;

PolygonMode Fill;
CullMode Back;
DepthCompare LessOrEqual;
PrimitiveTopology TriangleList;
BlendEnabled false;
DepthWrite true;
DepthTest true;

[[uniform], [public]] vec4 color = vec4(1, 1, 1, 1);
[[uniform], [public]] sampler2D diffuse;

#include <Engine/Shaders/CascadedShadowMap/pcf-utils.inl.srsl>

void fragment() {
    vec3 diffuseColor = texture(diffuse, UV).rgb * color.rgb;
    vec3 lightColor = vec3(1.0);

    COLOR = CalculateShadow(diffuseColor, lightColor);
}

void vertex() {
    PreparePCF(MODEL_MATRIX);
    OUT_POSITION = PROJECTION_MATRIX * VIEW_MATRIX * MODEL_MATRIX * vec4(VERTEX, 1.0);
}