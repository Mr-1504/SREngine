ShaderType Skinned;

PolygonMode Fill;
CullMode Back;
DepthCompare LessOrEqual;
PrimitiveTopology TriangleList;
BlendEnabled false; 
DepthWrite true;
DepthTest true;

[[uniform], [public]] vec4 color;
[[uniform], [public]] sampler2D diffuse;

[[ssbo(bones)]] mat4[] bones;
[[ssbo(offsets)]] mat4[] boneOffsets;

void fragment() {
    vec3 diffuse_albedo = texture(diffuse, UV).rgb * color.rgb;

    vec3 norm = vec3(NORMAL.x + NORMAL.y + NORMAL.z) / 12.0; //TODO::Переписать под костевую анимацию, нужно пересчитать NORMAL

	COLOR = vec4(diffuse_albedo + norm, 1.0);
    COLOR_INDEX_1 = vec4(vec3(0), 0.0);
    COLOR_INDEX_2 = vec4(vec3(0), 0.0);
}

void vertex() {
    mat4 boneTransform = (bones[int(WEIGHT0[0])] * boneOffsets[int(WEIGHT0[0])]) * WEIGHT0[1];
    boneTransform     += (bones[int(WEIGHT1[0])] * boneOffsets[int(WEIGHT1[0])]) * WEIGHT1[1];
    boneTransform     += (bones[int(WEIGHT2[0])] * boneOffsets[int(WEIGHT2[0])]) * WEIGHT2[1];
    boneTransform     += (bones[int(WEIGHT3[0])] * boneOffsets[int(WEIGHT3[0])]) * WEIGHT3[1];
    boneTransform     += (bones[int(WEIGHT4[0])] * boneOffsets[int(WEIGHT4[0])]) * WEIGHT4[1];
    boneTransform     += (bones[int(WEIGHT5[0])] * boneOffsets[int(WEIGHT5[0])]) * WEIGHT5[1];
    boneTransform     += (bones[int(WEIGHT6[0])] * boneOffsets[int(WEIGHT6[0])]) * WEIGHT6[1];
    boneTransform     += (bones[int(WEIGHT7[0])] * boneOffsets[int(WEIGHT7[0])]) * WEIGHT7[1];

    VERTEX = (boneTransform * vec4(VERTEX, 1.0)).xyz;
    OUT_POSITION = PROJECTION_MATRIX * VIEW_MATRIX * vec4(VERTEX, 1.0);
}